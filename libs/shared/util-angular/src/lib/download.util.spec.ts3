import { DomSanitizer } from '@angular/platform-browser';
import { Browser } from '@capacitor/browser';
import { downloadToBrowser, exportXlsx, generateDownloadURI, downloadFileFromStorage } from './download.util';
import * as XLSX from 'xlsx';
import { getDownloadURL, ref } from 'firebase/storage';
import { ToastController } from '@ionic/angular';

jest.mock('@capacitor/browser');

describe('downloadToBrowser', () => {
  it('should call Browser.open with the download URL', async () => {
    const url = 'http://example.com/download';
    await downloadToBrowser(url);
    expect(Browser.open).toHaveBeenCalledWith({ url });
  });

  it('should log the download URL', async () => {
    const url = 'http://example.com/download';
    console.log = jest.fn();
    await downloadToBrowser(url);
    expect(console.log).toHaveBeenCalledWith(`download.util/downloadToBrowser(${url})`);
  });
});

describe('generateDownloadURI', () => {
    let sanitizer: DomSanitizer;
    const mockSanitizedUrl = 'http://example.com/download';
    
    beforeEach(() => {
      sanitizer = {
        bypassSecurityTrustUrl: jest.fn(() => mockSanitizedUrl)
      } as unknown as DomSanitizer;
    });
  
    it('should call bypassSecurityTrustUrl with the expected URL', () => {
      const stringifiedObj = '{"foo": "bar"}';
      const mimeType = 'application/json';
      const expectedUrl = `data:${mimeType};charset=UTF-8,${encodeURIComponent(stringifiedObj)}`;
      const result = generateDownloadURI(sanitizer, stringifiedObj, mimeType);
      expect(sanitizer.bypassSecurityTrustUrl).toHaveBeenCalledWith(expectedUrl);
      expect(result).toEqual(mockSanitizedUrl);
    });
  });

  jest.mock('xlsx');

describe('exportXlsx', () => {
  const data = [
    ['foo', 'bar'],
    ['baz', 'qux'],
  ];
  const fileName = 'test.xlsx';
  const tableName = 'Test';

  it('should generate a workbook with a single worksheet', async () => {
    await exportXlsx(data, fileName, tableName);
    expect(XLSX.utils.aoa_to_sheet).toHaveBeenCalledWith(data);
    expect(XLSX.utils.book_new).toHaveBeenCalled();
    expect(XLSX.utils.book_append_sheet).toHaveBeenCalledWith(
      expect.any(Object),
      expect.any(Object),
      tableName,
    );
  });

  it('should write the workbook to a file', async () => {
    await exportXlsx(data, fileName, tableName);
    expect(XLSX.writeFile).toHaveBeenCalledWith(
      data,
      fileName,
    );
  });
});

jest.mock('firebase/storage');

describe('downloadFileFromStorage', () => {
  const toastController: ToastController = {
    create: jest.fn(() => ({
      present: jest.fn(),
    })),
  } as unknown as ToastController;
  const path = 'test/file.txt';
  const downloadUrl = 'http://example.com/download';

  beforeEach(() => {
    (getDownloadURL as jest.Mock).mockResolvedValueOnce(downloadUrl);
  });

  it('should call getDownloadURL with the correct path', async () => {
    await downloadFileFromStorage(toastController, path);
    expect(ref).toHaveBeenCalledWith(Inject(STORAGE), path);
    expect(getDownloadURL).toHaveBeenCalledWith(expect.any(Object));
  });

  it('should return the download URL on success', async () => {
    const result = await downloadFileFromStorage(toastController, path);
    expect(result).toEqual(downloadUrl);
  });

  it('should show a toast message on error', async () => {
    const error = new Error('Test error');
    (getDownloadURL as jest.Mock).mockRejectedValueOnce(error);
    await downloadFileFromStorage(toastController, path);
    expect(toastController.create).toHaveBeenCalledWith(
      expect.objectContaining({ message: expect.any(String) })
    );
  });

  it('should return an empty string on error', async () => {
    const error = new Error('Test error');
    (getDownloadURL as jest.Mock).mockRejectedValueOnce(error);
    const result = await downloadFileFromStorage(toastController, path);
    expect(result).toEqual('');
  });
});
